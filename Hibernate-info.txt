Building session factory
Earlier using AnnotationConfiguration (Now its deprecated.)

In V 4.X
Configuration configuration = new Configuration().configure(HibernateUtil.class.getResource("/hibernate.cfg.xml"));
	           
				StandardServiceRegistryBuilder serviceRegistryBuilder = new StandardServiceRegistryBuilder();
	            serviceRegistryBuilder.applySettings(configuration.getProperties());
	            ServiceRegistry serviceRegistry = serviceRegistryBuilder.build();
	            SessionFactory sessionFactory = configuration.buildSessionFactory(serviceRegistry);
---------------
Session
Hibernate Session is the interface between java application and hibernate framework


Saving the object

1) persist
saves the object. does not return any value. ie primary key value.

2)save
saves the object. it returns the primary key column value 

3) saveOrUpdate(obj)

To save persistent entity in another session, we can use saveOrUpdate method.
To save the detached object in a different session, we need to use this method.
We can use this method to save transient object too.

refresh
Sometimes we face situation where we application database is modified with some external application/agent and thus corresponding 
hibernate entity in your application actually becomes out of sync with itâ€™s database representation i.e. having old data. 
In this case, you can use session.refresh() method to re-populate the entity with latest data available in database. 
example:
sessionTwo.refresh(obj);
----------

merge
It updates the database with values from a detached entity.
Merging is performed when you desire to have a detached entity changed to persistent state again	

==================
Transient data, persistent data

Transient data:
We have created the object. set the data to it. Update the database row. No need to select the object from the db for updating.
session.update(Obj);
------
check session.merge(Obj);

----------------

transaction-type="RESOURCE_LOCAL"
one more option is JTA


List<Person>persons = session.createQuery("from Person").list();


Hibernate object states
Person obj = new Person("mahesh"); //its transient object
session.save(obj); //object becomes persistent object. which has representation in the db. 	


Inheritance concepts

@Inheritance(strategy=InheritanceType.JOINED)
public class Vehicle { vehicle_id,vehicle_name}


public class Motorcycle extends Vehicle{engineType}

Now if you save objects.
vehicle table will have motorcycle objects vehicle id, name
motorcycle table has only one column engineType


@Inheritance(strategy=InheritanceType.TABLE_PER_CLASS)
public class Vehicle {}

In this case motorcycle class will have 3 columns. vehicle_id, name,enginetype



=====================
Check

batch processing
<property name="hibernate.jdbc.batch_size">10</property>
session.save(obj);

--condition
session.flush();
session.clear();

hibernate.jdbc.fetch_size ???
session.flush ?

Caching in data
1st level cache
Session cache. It is enabled by default. Objects stored in the 1st level cache are accessible only in the session in which they are stored.
always 1st level cache always be considered first before any attempt to made to find object in 2nd level cache.

2nd level cache
its configurable according to per class. or per collection basis. and its mainly responsible for caching objects across sessions.

4 cache strategy available.
1) Transactional
2) Read write 
3) Non 
4) Read only 

To enable 2nd level cache you need to below jars
ehcache-core.jar
hibernate-ehcache.jar

then ehcache.xml file should be present.

In the property file you need to mention the below properties.
<property name="cache.provider_class">org.hibernate.cache.EhCacheProvider</property>  
<property name="hibernate.cache.use_second_level_cache">true</property>  

-----------------------
@PersistenceContext
 
 
defining custom type

@DescriminatorValue

Inheritance
check table per class strategy
-------
OneToMany example

MCategory.java
@OneToMany(mappedBy="category",cascade=CascadeType.ALL)		
		private Set<MProduct> products;

MProduct.java
@ManyToOne
		@JoinColumn(name="category_id")
		private MCategory category;
		

--------------------
OneToOne example
		
MCategory.java
@OneToOne(cascade=CascadeType.ALL)
		@JoinColumn(name="product_id")
		private MProduct products;
		
------------------------
JPA Entity manager

		
================== Query =================

org.hibernate.ejb.HibernatePersistence
adding model classes in xm file
Detached Entity.
PersistenceContext

=========================================
	URL
http://howtodoinjava.com/jpa/spring-hibernate-jpa-configuration-example/	

		Check

@PersistenceContext
EntitManager in jpa.		

----------------------------

Overall concepts
batch processing
caching levels and thier purpose
hibernate inheritance
configure sessions.

