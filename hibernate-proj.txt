One to One

MProduct.java

package oneToOneTest;

import javax.persistence.Cacheable;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;


@Entity
@Table(name="MProduct")
@Cacheable
@Cache(usage= CacheConcurrencyStrategy.READ_ONLY)
public class MProduct {

		@Id
		@Column(name="product_id")
		@GeneratedValue
		private int id;
		
		@Column(name="product_name")
		private String prodName;
		
		public MProduct() {
			
		}
		
		public MProduct(String prodName )
		{
			this.prodName = prodName;
						
		}
		 		
}

MProduct.java

package oneToOneTest;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;


@Entity
@Table(name="MProduct")
@Cacheable
@Cache(usage= CacheConcurrencyStrategy.READ_ONLY)
public class MProduct {

		@Id
		@Column(name="product_id")
		@GeneratedValue
		private int id;
		
		@Column(name="product_name")
		private String prodName;
		
		public MProduct() {
			
		}
		
		public MProduct(String prodName )
		{
			this.prodName = prodName;
						
		}
			
}

HibernateTest.java

package oneToOneTest;

import java.util.List;
import java.util.Set;
import java.util.Arrays;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator; 
 
import org.hibernate.HibernateException; 
import org.hibernate.Session; 
import org.hibernate.Transaction;
import org.hibernate.cfg.AnnotationConfiguration;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;


import util.HibernateUtil;


public class HibernateTest {

	private static SessionFactory factory; 
	private static Session session;
	private static Transaction tx;
	
	
	public static void codejava() throws Exception
	{
			
		try{
			
			System.out.println("adding new records============================");
			
			session = HibernateUtil.getSessionFactory().openSession();
	        session.beginTransaction();
	        
	        MCategory category1 = new MCategory("Company11");
	        
	        MProduct product1 = new MProduct("Samsung11");
	        
	        MCategory category2 = new MCategory("Book11");
	        MProduct product2 = new MProduct("Novel11");
	        
			category1.setProduct(product1);
			category2.setProduct(product2);
			
	        session.save(category1);
	        session.save(category2);
	        
	        session.getTransaction().commit();
	        
		}catch(Exception e) {
			System.out.println("==========error="+e);
		}
		
	}
	 
	public static void main(String[] args) throws Exception {
		
		try {
				HibernateUtil.getSessionFactory();
				codejava();
				 

		}catch(Exception e) {
			System.out.println("==error="+e);
		}
	}

}
--------------
hibernate.cfg.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
    "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
    "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">
    <hibernate-configuration>
        <session-factory>
            <property name="connection.driver_class">
                org.apache.derby.jdbc.EmbeddedDriver
            </property>
            <!-- <property name="connection.url">jdbc:derby:D:\\Mahesh\Projects\Derby\DerbyData\demo</property>  -->
            <property name="connection.url">jdbc:derby:D:\\Mahesh\Projects\Derby\DerbyData\demo</property>
            
            <!-- Below is required for 2nd level cache -->
            <property name="cache.provider_class">org.hibernate.cache.EhCacheProvider</property>  
			<property name="hibernate.cache.use_second_level_cache">true</property>
			 
            
            <property name="connection.username"></property>
            <property name="connection.password"></property>
            <property name="dialect">org.hibernate.dialect.DerbyDialect</property>
            <property name="hibernate.generate_statistics">true</property>
            <property name="show_sql">true</property>
            <!-- <property name="hibernate.jdbc.batch_size">1</property>  -->
            
            <property name="hibernate.hbm2ddl.auto">update</property>
            
            <!-- <mapping class="oneToManyTest.MProduct"/>
			<mapping class="oneToManyTest.MCategory"/>   -->

			<!-- oneToOneTest   -->
			<mapping class="oneToOneTest.MProduct"/>
			<mapping class="oneToOneTest.MCategory"/>
			
			<mapping class="inheritance.tablePerClass.Vehicle"/>
			<mapping class="inheritance.tablePerClass.MotorCycle"/>
			
        </session-factory>
    </hibernate-configuration>
----------------	
ehcache.xml

<?xml version="1.0"?>  
<ehcache>  
<defaultCache   
maxElementsInMemory="100"   
eternal="false"   
timeToIdleSeconds="120"   
timeToLiveSeconds="200" />  
  
<cache name="oneToOneTest.MProduct"   
maxElementsInMemory="100"   
eternal="false"   
timeToIdleSeconds="5"   
timeToLiveSeconds="10" />  
</ehcache>  	
----------------
pom.xml
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>HiberProj</groupId>
    <artifactId>HiberProj</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <repositories>
        <repository>
            <id>jboss</id>
            <url>http://repository.jboss.org/maven2</url>
        </repository>
    </repositories>
    <dependencies>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate</artifactId>
            <version>3.5.1-Final</version>
            <type>pom</type>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-annotations</artifactId>
            <version>3.5.5-Final</version>
        </dependency>
        
        <!-- EHCache Core APIs -->
		<dependency>
			<groupId>net.sf.ehcache</groupId>
			<artifactId>ehcache-core</artifactId>
			<version>2.6.9</version>
		</dependency>
		<!-- Hibernate EHCache API -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-ehcache</artifactId>
			<version>3.5.5-Final</version>
		</dependency>
        
        
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-entitymanager</artifactId>
            <version>3.5.5-Final</version>
        </dependency>
        <dependency>
            <groupId>antlr</groupId>
            <artifactId>antlr</artifactId>
            <version>2.7.6</version>
        </dependency>
        <dependency>
            <groupId>commons-collections</groupId>
            <artifactId>commons-collections</artifactId>
            <version>3.2.1</version>
        </dependency>
        <dependency>
            <groupId>dom4j</groupId>
            <artifactId>dom4j</artifactId>
            <version>1.6.1</version>
        </dependency>
        <dependency>
            <groupId>javassist</groupId>
            <artifactId>javassist</artifactId>
            <version>3.9.0.GA</version>
        </dependency>
        <dependency>
            <groupId>javax.transaction</groupId>
            <artifactId>jta</artifactId>
            <version>1.1</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.5.8</version>
            <type>pom</type>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>ejb3-persistence</artifactId>
            <version>3.3.2.Beta1</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-simple</artifactId>
            <version>1.5.8</version>
        </dependency>
        <dependency>
            <groupId>org.apache.derby</groupId>
            <artifactId>derby</artifactId>
            <version>10.13.1.1</version>
        </dependency>
        <dependency>
            <groupId>org.apache.derby</groupId>
            <artifactId>derbyclient</artifactId>
            <version>10.13.1.1</version>
        </dependency>
        <dependency>
            <groupId>org.apache.derby</groupId>
            <artifactId>derbynet</artifactId>
            <version>10.13.1.1</version>
        </dependency>
        <dependency>
            <groupId>org.apache.derby</groupId>
            <artifactId>derbytools</artifactId>
            <version>10.13.1.1</version>
        </dependency>
        
    </dependencies>
    <build>
        <plugins>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>1.6</source>
                    <target>1.6</target>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
-------------

app.java
import java.util.List;

import oneToOneTest.MProduct;
import oneToOneTest.MCategory;

import java.util.List;
import java.util.Set;
import java.util.Arrays;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator; 
 

import org.hibernate.HibernateException; 
import org.hibernate.Session; 
import org.hibernate.Transaction;
import org.hibernate.cfg.AnnotationConfiguration;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

import util.HibernateUtil;


public class getData {

	private static SessionFactory factory; 
	private static Session session;
	private static Transaction tx;
	
	
	public static void codejava() throws Exception
	{
			
		try{
			
			System.out.println("adding new records============================");
			
			session = HibernateUtil.getSessionFactory().openSession();
	        session.beginTransaction();
	        
	        List<MProduct>products = session.createQuery("from MProduct").list();
	        
	        Iterator<MProduct> iterator = products.iterator();
	        MProduct obj= null;
	        
	        while(iterator.hasNext()) {
	        	obj = iterator.next();
	        	System.out.println(obj.getProdName());
	        }
	        
	        session.getTransaction().commit();
	        
		}catch(Exception e) {
			System.out.println("==========error="+e);
		}
		
	}
	
	public static void secondLevelCacheTest() throws Exception
	{
		try{
			
			System.out.println("Loading the data============================");
			
			session = HibernateUtil.getSessionFactory().openSession();
	        //session.beginTransaction();
	        
	        MProduct product = (MProduct)session.load(MProduct.class, new Integer(1));
	        System.out.println("Test line");
	        System.out.println("1:"+product.getProdName());
	        
	        session.close();
	        
	        	        
	        Session session2 = HibernateUtil.getSessionFactory().openSession();
	        //session.clear();
	        product = (MProduct)session2.load(MProduct.class, new Integer(1));
	        System.out.println("2:"+product.getProdName());
	         
	        session2.close();
	        
	        
		}catch(Exception e) {
			System.out.println("==========error="+e);
		}
		
	}
	public static void loadData() throws Exception
	{
			
		try{
			
			System.out.println("Loading the data============================");
			
			session = HibernateUtil.getSessionFactory().openSession();
	        session.beginTransaction();
	        
	        MProduct product = (MProduct)session.load(MProduct.class, new Integer(1));
	        System.out.println("1:"+product.getProdName());
	        
	        //session.clear();
	        product = (MProduct)session.load(MProduct.class, new Integer(2));
	        System.out.println("2:"+product.getProdName());
	        
	        product = (MProduct)session.load(MProduct.class, new Integer(1));
	        System.out.println("3:"+product.getProdName());
	        
	        session.getTransaction().commit();
	        session.close();
	        
		}catch(Exception e) {
			System.out.println("==========error="+e);
		}
		
	}
	 
	public static void main(String[] args) throws Exception {
		
		try {
				HibernateUtil.getSessionFactory();
				//codejava();
				// loadData();
				secondLevelCacheTest();
				 

		}catch(Exception e) {
			System.out.println("==error="+e);
		}
	}

}

-------------
Util class

package util;

import org.hibernate.SessionFactory;
import org.hibernate.cfg.AnnotationConfiguration;
import org.hibernate.cfg.Configuration;


public class HibernateUtil  {

	private static final SessionFactory factory = buildSessionFactory();	
			
			
	private static 	SessionFactory buildSessionFactory()
	{
		
			try {
					
				SessionFactory factory = new AnnotationConfiguration().
		                   configure().
		                   //addPackage("com.xyz") //add package if used.
		                   //addAnnotatedClass(entity.Person.class).
		                   //addAnnotatedClass(entity.MProduct.class).
		                   //addAnnotatedClass(entity.MCategory.class).
		                   buildSessionFactory();
				return factory;
				
			}catch (Throwable ex) { 
		         System.err.println("Failed to create sessionFactory object." + ex);
		         throw new ExceptionInInitializerError(ex); 
		      }
	}
	
	public static SessionFactory getSessionFactory() {
		
		return factory;
	}
	
}
